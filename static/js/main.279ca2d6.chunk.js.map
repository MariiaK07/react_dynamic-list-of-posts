{"version":3,"sources":["components/PostsList/PostsList.tsx","components/NewCommentForm/NewCommentForm.tsx","api/api.ts","api/posts.ts","api/comments.ts","components/PostDetails/PostDetails.tsx","App.tsx","index.tsx"],"names":["PostsList","posts","postId","selectPost","className","map","post","userId","title","id","type","onClick","NewCommentForm","addComment","useState","name","setName","email","setEmail","body","setBody","onSubmit","event","preventDefault","value","placeholder","onChange","target","required","BASE_URL","request","url","options","fetch","then","res","ok","Error","status","statusText","json","getUserPosts","getPostDetails","getPostComments","deletePostComment","commentId","method","postNewComment","comment","headers","JSON","stringify","PostDetails","setPost","comments","setComments","areCommentsHidden","setAreCommentsHidden","useEffect","fetchData","a","Promise","all","postFromServer","commentsFromServer","deleteComment","currentComments","filter","newComment","disabled","length","App","setPosts","setPostId","setUserId","result","htmlFor","Number","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.279ca2d6.chunk.js","sourcesContent":["import React from 'react';\nimport './PostsList.scss';\n\ninterface Props {\n  posts: Post[];\n  postId: number;\n  selectPost: (id: number) => void;\n}\n\nexport const PostsList: React.FC<Props> = ({ posts, postId, selectPost }) => (\n  <div className=\"PostsList\">\n    <h2>Posts:</h2>\n\n    <ul className=\"PostsList__list\">\n      {posts.map(post => (\n        <li className=\"PostsList__item\" key={post.id}>\n          <div>\n            <b>{`[User #${post.userId}]: `}</b>\n            {post.title}\n          </div>\n          {postId === post.id ? (\n            <button\n              type=\"button\"\n              className=\"button PostsList__button\"\n              onClick={() => selectPost(0)}\n            >\n              Close\n            </button>\n          ) : (\n            <button\n              type=\"button\"\n              className=\"button PostsList__button\"\n              onClick={() => selectPost(post.id)}\n            >\n              Open\n            </button>\n          )}\n        </li>\n      ))}\n    </ul>\n  </div>\n);\n","import React, { useState } from 'react';\nimport './NewCommentForm.scss';\n\ntype Props = {\n  postId: number;\n  addComment: (comment: Omit<PostComment, 'id'>) => void;\n};\n\nexport const NewCommentForm: React.FC<Props> = ({ postId, addComment }) => {\n  const [name, setName] = useState('');\n  const [email, setEmail] = useState('');\n  const [body, setBody] = useState('');\n\n  const handleSubmit: React.FormEventHandler = (event) => {\n    event.preventDefault();\n\n    addComment({\n      postId,\n      name,\n      email,\n      body,\n    });\n\n    setName('');\n    setEmail('');\n    setBody('');\n  };\n\n  return (\n    <form\n      className=\"NewCommentForm\"\n      onSubmit={handleSubmit}\n    >\n      <div className=\"form-field\">\n        <input\n          type=\"text\"\n          name=\"name\"\n          value={name}\n          placeholder=\"Your name\"\n          className=\"NewCommentForm__input\"\n          onChange={event => setName(event.target.value)}\n          required\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <input\n          type=\"email\"\n          name=\"email\"\n          value={email}\n          placeholder=\"Your email\"\n          className=\"NewCommentForm__input\"\n          onChange={event => setEmail(event.target.value)}\n          required\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <textarea\n          name=\"body\"\n          value={body}\n          placeholder=\"Type comment here\"\n          className=\"NewCommentForm__input\"\n          onChange={event => setBody(event.target.value)}\n          required\n        />\n      </div>\n\n      <button\n        type=\"submit\"\n        className=\"NewCommentForm__submit-button button\"\n      >\n        Add a comment\n      </button>\n    </form>\n  );\n};\n","export const BASE_URL = 'https://mate.academy/students-api';\n\nexport const request = (url: string, options = {}) => {\n  return fetch(`${BASE_URL}${url}`, options)\n    .then(res => {\n      if (!res.ok) {\n        throw new Error(`${res.status}-${res.statusText}`);\n      }\n\n      return res.json();\n    });\n};\n","import { request } from './api';\n\nexport const getPosts = () => {\n  return request('/posts');\n};\n\nexport const getUserPosts = (userId: number) => {\n  return request(`/posts?userId=${userId}`);\n};\n\nexport const getPostDetails = (postId: number) => {\n  return request(`/posts?id=${postId}`);\n};\n","import { request } from './api';\n\nexport const getPostComments = (postId: number) => {\n  return request(`/comments?postId=${postId}`);\n};\n\nexport const deletePostComment = (commentId: number) => {\n  return request(`/comments/${commentId}`, {\n    method: 'DELETE',\n  });\n};\n\nexport const postNewComment = (comment: Omit<PostComment, 'id'>) => {\n  return request('/comments', {\n    method: 'POST',\n    headers: {\n      'Content-type': 'application/json; charset=UTF-8',\n    },\n    body: JSON.stringify(comment),\n  });\n};\n","import React, { useState, useEffect } from 'react';\nimport { NewCommentForm } from '../NewCommentForm';\nimport './PostDetails.scss';\nimport { getPostDetails } from '../../api/posts';\nimport { deletePostComment, getPostComments, postNewComment } from '../../api/comments';\n\ntype Props = {\n  postId: number;\n};\n\nexport const PostDetails: React.FC<Props> = ({ postId }) => {\n  const [post, setPost] = useState<Post>({} as Post);\n  const [comments, setComments] = useState<PostComment[]>([]);\n  const [areCommentsHidden, setAreCommentsHidden] = useState(false);\n\n  useEffect(() => {\n    const fetchData = async () => {\n      const [postFromServer, commentsFromServer] = await Promise.all([\n        getPostDetails(postId),\n        getPostComments(postId),\n      ]);\n\n      setPost(postFromServer[0]);\n      setComments(commentsFromServer);\n      setAreCommentsHidden(false);\n    };\n\n    fetchData();\n  }, [postId]);\n\n  const deleteComment = async (commentId: number) => {\n    await deletePostComment(commentId);\n\n    setComments(currentComments => currentComments.filter(\n      comment => comment.id !== commentId,\n    ));\n  };\n\n  const addComment = async (comment: Omit<PostComment, 'id'>) => {\n    const newComment = await postNewComment(comment);\n\n    setComments(currentComments => [...currentComments, newComment]);\n  };\n\n  return (\n    <div className=\"PostDetails\">\n      <h2>Post details:</h2>\n\n      <section className=\"PostDetails__post\">\n        {post !== null && <p>{post.body}</p>}\n      </section>\n\n      <section className=\"PostDetails__comments\">\n        <button\n          type=\"button\"\n          className=\"button PostDetails__button\"\n          onClick={() => {\n            setAreCommentsHidden(!areCommentsHidden);\n          }}\n          disabled={comments.length < 1}\n        >\n          {!areCommentsHidden ? 'Hide comments' : 'Show comments'}\n        </button>\n\n        {!areCommentsHidden && (\n          <ul className=\"PostDetails__list\">\n            {comments.map(comment => (\n              <li className=\"PostDetails__list-item\" key={comment.id}>\n                <button\n                  type=\"button\"\n                  className=\"PostDetails__remove-button button\"\n                  onClick={() => deleteComment(comment.id)}\n                >\n                  X\n                </button>\n                <p>{comment.body}</p>\n              </li>\n            ))}\n          </ul>\n        )}\n      </section>\n\n      <section>\n        <div className=\"PostDetails__form-wrapper\">\n          <NewCommentForm\n            postId={postId}\n            addComment={addComment}\n          />\n        </div>\n      </section>\n    </div>\n  );\n};\n","import React, { useState, useEffect } from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\nimport { getPosts, getUserPosts } from './api/posts';\n\nconst App: React.FC = () => {\n  const [posts, setPosts] = useState([]);\n  const [postId, setPostId] = useState(0);\n  const [userId, setUserId] = useState(0);\n\n  useEffect(() => {\n    const fetchData = async () => {\n      let result = await getUserPosts(userId);\n\n      if (userId === 0) {\n        result = await getPosts();\n      }\n\n      setPosts(result);\n    };\n\n    fetchData();\n  }, [userId]);\n\n  return (\n    <div className=\"App\">\n      <header className=\"App__header\">\n        <label htmlFor=\"select\">\n          Select a user: &nbsp;\n\n          <select\n            id=\"select\"\n            className=\"App__user-selector\"\n            onChange={event => setUserId(Number(event.target.value))}\n          >\n            <option value=\"0\">All users</option>\n            <option value=\"1\">Leanne Graham</option>\n            <option value=\"2\">Ervin Howell</option>\n            <option value=\"3\">Clementine Bauch</option>\n            <option value=\"4\">Patricia Lebsack</option>\n            <option value=\"5\">Chelsey Dietrich</option>\n            <option value=\"6\">Mrs. Dennis Schulist</option>\n            <option value=\"7\">Kurtis Weissnat</option>\n            <option value=\"8\">Nicholas Runolfsdottir V</option>\n            <option value=\"9\">Glenna Reichert</option>\n            <option value=\"10\">Leanne Graham</option>\n          </select>\n        </label>\n      </header>\n\n      <main className=\"App__main\">\n        <div className=\"App__sidebar\">\n          <PostsList\n            posts={posts}\n            postId={postId}\n            selectPost={(id: number) => {\n              setPostId(id);\n            }}\n          />\n        </div>\n\n        <div className=\"App__content\">\n          {postId > 0 && (\n            <PostDetails postId={postId} />\n          )}\n        </div>\n      </main>\n    </div>\n  );\n};\n\nexport default App;\n","import ReactDOM from 'react-dom';\n\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}